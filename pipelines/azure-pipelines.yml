pool:
  name: 'DCRI Agents'
  vmImage: ubuntu-22.04


variables:
  - name: environmentName
    value: 'dev' # default value
  - ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    - name: environmentName
      value: 'dev'
  - ${{ if eq(variables['Build.SourceBranchName'], 'val') }}:
    - name: environmentName
      value: 'val'
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    - name: environmentName
      value: 'prod'
  - name: imageName
    value: "$(environmentName)/createMockData"
  - name: tag
    value: '$(Build.BuildId)'
stages:

# ---------------------------------------------------------------------------------------------------------------------
# Initalization stage
#
# Initialize the build machine. 
# 

- stage: Init
  jobs:
  - job: InstallSoftware
    steps:    

    - script: |
        sudo apt-get update
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install docker-ce docker-ce-cli containerd.io jq docker-compose -y
        sudo usermod -aG docker $USER
        sudo chgrp docker $(which docker)
        sudo chmod g+s $(which docker)
        sudo chgrp docker $(which docker-compose)
        sudo chmod g+s $(which docker-compose)
        sudo chmod 666 /var/run/docker.sock
        sudo apt-get upgrade -y
        sudo az upgrade --yes
        sudo apt list -a azure-cli
        az -v
      displayName: 'Install Docker & Azure CLI'

    - script: |
        sudo apt-get install nodejs npm -y
      displayName: 'Install Node, NPM'

# Try to install Maven, but also exit with success in case the packages fail to install. 
# The "exit 0" may need to be removed in the future, but we don't need the package that is currently failing. 

#    - script: |
#        sudo apt-get install maven -y ; exit 0
#      displayName: 'Install Maven'    

    - script: |
        #!/bin/bash        
        echo "##vso[task.setvariable variable=agentValue;isOutput=true]$(Agent.Name)"
      name: setvarStep

#
# Run the Docker Build as long as Init passes
# 

- stage: Build
  dependsOn: Init
  variables:
      useThisAgent: $[ stageDependencies.Init.InstallSoftware.outputs['setvarStep.agentValue'] ]  
  pool:
    name: 'DCRI Agents'
    demands: Agent.Name -equals $(useThisAgent)

  jobs:
    - job: Build
      steps:    
      - task: Docker@2
        displayName: Build an image
        inputs:
          repository: $(imageName)
          command: build
          Dockerfile: Dockerfile
          containerRegistry: 'devops-spn-aitest-prod'
          tags: latest,$(tag)

#
# Push the Docker Image if the conditions are met. 
# 

- stage: Deploy
  dependsOn: 
    - Init
    - Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/dev'), eq(variables['Build.SourceBranch'], 'refs/heads/val'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
  variables:
      useThisAgent: $[ stageDependencies.Init.InstallSoftware.outputs['setvarStep.agentValue'] ]  
  pool:
    name: 'DCRI Agents'
    demands: Agent.Name -equals $(useThisAgent)
  jobs:
    - job: Push
      steps:    
      - task: Docker@2
        displayName: Build an image
        inputs:
          repository: $(imageName)
          command: push
          Dockerfile: Dockerfile
          containerRegistry: 'devops-spn-aitest-prod'
          tags: latest,$(tag)
        
